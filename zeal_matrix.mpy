from typing import Optional
import json
import os
from nio import (
    AsyncClient, AsyncClientConfig, LoginResponse, MatrixRoom, RoomMessageText, ToDeviceMessage,
    KeyVerificationEvent, KeyVerificationStart, KeyVerificationCancel, KeyVerificationKey,
    KeyVerificationMac, ToDeviceError, LocalProtocolError, exceptions, ProfileGetDisplayNameResponse
)
import mystic_bbs as bbs
import asyncio
import sqlite3
import random

address = "https://matrix.org"
token_file  = "/mystic/src/data/zealmatrix/access_token.json"
db_file = "/mystic/src/data/zealmatrix/users.sqlite"

# Database setup
def setup_database():
    conn = sqlite3.connect(db_file)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id TEXT PRIMARY KEY,
            color INTEGER,
            host TEXT,
            username TEXT,
            display_name TEXT
        )
    ''')
    conn.commit()
    conn.close()

def get_existing_user_ids():
    conn = sqlite3.connect(db_file)
    cursor = conn.cursor()
    cursor.execute('SELECT user_id FROM users')
    user_ids = [row[0] for row in cursor.fetchall()]
    conn.close()
    return user_ids

async def save_users(client, room_id):
    room = client.rooms[room_id]
    user_ids = room.users
    existing_user_ids = get_existing_user_ids()

    new_user_ids = [uid for uid in user_ids if uid not in existing_user_ids]
    display_names = await asyncio.gather(*(client.get_displayname(uid) for uid in new_user_ids))

    for user_id, response in zip(new_user_ids, display_names):
        if isinstance(response, ProfileGetDisplayNameResponse) and response.displayname:
            display_name_str = response.displayname
        else:
            display_name_str = ""
        await save_user(client, user_id, display_name_str)  # Adjust this function to be a coroutine

async def save_user(client, user_id, display_name_str):
    conn = sqlite3.connect(db_file)
    cursor = conn.cursor()


    # Check if the user already exists
    cursor.execute('SELECT user_id FROM users WHERE user_id = ?', (user_id,))
    if cursor.fetchone() is None:
        # User does not exist, insert new user
        color = random.randint(1, 15)
        host = user_id.split(':')[-1]
        username = user_id.split(':')[0][1:]
        cursor.execute('''
            INSERT INTO users (user_id, color, host, username, display_name)
            VALUES (?, ?, ?, ?, ?)
        ''', (user_id, color, host, username, display_name_str))
        conn.commit()

    conn.close()

def get_user_info(user_id):
    conn = sqlite3.connect(db_file)
    cursor = conn.cursor()
    cursor.execute('SELECT color, host, username, display_name FROM users WHERE user_id = ?', (user_id,))
    user_info = cursor.fetchone()
    conn.close()
    return user_info

# Functions for token handling
async def save_token(user_id, device_id, access_token):
    with open(token_file, "w") as f:
        json.dump({"user_id": user_id, "device_id": device_id, "access_token": access_token}, f)

async def load_token():
    if os.path.exists(token_file):
        with open(token_file, "r") as f:
            return json.load(f)
    return None

# Callbacks and helper functions
async def message_callback(room, event):
    if isinstance(event, RoomMessageText):
        try:
            bbs.writeln(f"|11Message received in room {room.room_id}: {event.body}|15")
        except Exception as e:
            bbs.writeln(f"|145Error: {type(e).__name__}: {str(e)}|15")

async def sync_client(client):
    while True:
        await client.sync(timeout=10000)
        await asyncio.sleep(1)

def setup_client(username):
    client_config = AsyncClientConfig(
        max_limit_exceeded=0,
        max_timeouts=0,
        encryption_enabled=True,
        store_sync_tokens=True
    )
    return AsyncClient(address, username, store_path="/mystic/src/data/zealmatrix", config=client_config)

async def login_and_sync(client, username, password):
    response = await client.login(password, device_name="ZealBBS")
    if isinstance(response, LoginResponse):
        bbs.writeln(f"Logged in as {response.user_id}")
        await save_token(response.user_id, client.device_id, response.access_token)
        await client.sync()
    else:
        bbs.writeln(f"Login failed: {response}")
        return None
    return client

async def restore_login(client, token_data):
    client.restore_login(token_data['user_id'], token_data['device_id'], token_data['access_token'])
    await client.sync(full_state=True)
    return client

async def join_room(client, room_id):
    await client.join(room_id)
    bbs.writeln(f"Joined room {room_id}")
    await trust_all_devices_in_room(client, room_id)


async def trust_all_devices_in_room(client: AsyncClient, room_id: str):
    room = client.rooms[room_id]
    for user_id in room.users:
        for device_id, device in client.device_store[user_id].items():
            # Automatically trust the device
            client.verify_device(device)
            bbs.writeln(f"Trusted device {device_id} for user {user_id}")

# async def trust_all_devices_in_room(client: AsyncClient, room_id: str):
#     room = client.rooms[room_id]
#     for user_id in room.users:
#         for device_id, device in client.device_store[user_id].items():
            

#             transaction_id = f"{client.user_id}-{device_id}-{room_id}"
#             verification_request = KeyVerificationStart(
#                 from_device=client.device_id,
#                 method="m.sas.v1",
#                 to_device_id=device_id,
#                 transaction_id=transaction_id
#             )
#             message = ToDeviceMessage("m.key.verification.start", verification_request)
#             await client.to_device(message)
#             bbs.writeln(f"Sent verification request to {user_id}, device {device_id}")

#             # client.verify_device(device)
#             # bbs.writeln(f"Trusted device {device_id} for user {user_id}")

def trust_devices(client: AsyncClient, user_id: str, device_list: Optional[list] = None) -> None:
    bbs.writeln(f"{user_id}'s device store: {client.device_store[user_id]}")

    for device_id, olm_device in client.device_store[user_id].items():
        if device_list and device_id not in device_list:
            bbs.writeln(
                f"Not trusting {device_id} as it's not in {user_id}'s pre-approved list."
            )
            continue

        if user_id == client.user_id and device_id == client.device_id:
            # Skipping self verification
            continue

        client.verify_device(olm_device)
        bbs.writeln(f"Trusting {device_id} from user {user_id}")

async def check_password(client, username, password):
    temp_client = AsyncClient(address, username)
    response = await temp_client.login(password)
    await temp_client.close()  # Close the temporary client
    return isinstance(response, LoginResponse)
    
def parse_event(event, show_remote, show_names):
    user_info = get_user_info(event.sender)
    if user_info:
        color, host, username, display_name = user_info
        name = display_name if (show_names and display_name) else username

        if show_remote:
            message = f"|{color:02d}{name}|08: {host}:|15 {event.body}"
        else:
            message = f"|{color:02d}{name}|08:|15 {event.body}"
    else:
        # Fallback if user info not found
        message = f"|08{event.sender}:|15 {event.body}"

    bbs.writeln(message)

async def main():
    bbs.write("|CL")
    current_room_id = None
    show_remote = False
    show_names = True
    # Initialize MysticBBS
    bbs.writeln("|02Enter your Matrix username:|08")
    username = bbs.getstr(1, 50, 120, "@username:matrix.org")
    bbs.writeln("|02Enter your Matrix password:|08")
    password = bbs.getstr(6, 50, 120, "")

    client = setup_client(username)

    token_data = await load_token()
    if token_data and token_data['user_id'] == username:
        if await check_password(client, username, password):
            client = await restore_login(client, token_data)
            bbs.writeln(f"Restored login for {token_data['user_id']}")
        else:
            bbs.writeln("Incorrect password.")
    else:
        client = await login_and_sync(client, username, password)
        if client is None:
            return

    # Setup callbacks and start syncing
    client.add_event_callback(lambda room, event: message_callback(room, event), RoomMessageText)
    asyncio.create_task(sync_client(client))
        
    # https://matrix-nio.readthedocs.io/en/latest/examples.html#:~:text=callbacks%20%3D%20Callbacks,380
    # need to implemetn the above for proper encryption and verification with emoji n sheit
    
    # Sync encryption keys with the server
    # Required for participating in encrypted rooms
    if client.should_upload_keys:
        await client.keys_upload()

    bbs.writeln("Starting main loop...")  # Debugging print
    while True:
        await client.sync()  # Perform the first sync
        bbs.write('|CL')
        bbs.writeln("|[X00|[Y00|$C08|08[|11L|08]ist rooms, |08[|11J|08]oin room, |08[|11S|08]end message, |08[|11U|08]ser list, |08[|11Q|08]uit")
        if current_room_id:
            messages = await client.room_messages(current_room_id, "", limit=23)
            for event in reversed(messages.chunk):
                if isinstance(event, RoomMessageText):
                    parse_event(event, show_remote, show_names)

        key, extended = bbs.getkey()

        if key.upper() == 'L':
            bbs.writeln("Loading room list...") 
            for room_id, room in client.rooms.items():
                bbs.writeln(f"{room_id}: {room.display_name or room_id}")

        elif key.upper() == 'J':
            bbs.writeln("Loading join room list...") 
            # Creating a list of room IDs to easily access them by index
            room_ids = list(client.rooms.keys())

            bbs.writeln(f"{len(room_ids)} rooms") 

            for i, room_id in enumerate(room_ids):
                room_name = client.rooms[room_id].display_name or room_id
                bbs.writeln(f"|07[|11{i+1}|07]. {room_name}|08 ({room_id})|15")

            room_number = bbs.getstr(1, 2, 2, "Enter room number: ")
            if room_number.isdigit():
                room_number = int(room_number) - 1  # Adjust for 0-based indexing
                if room_number >= 0 and room_number < len(room_ids):
                    selected_room_id = room_ids[room_number]
                    current_room_id = selected_room_id  # Update current room ID
                    
                    await client.sync()  # Sync before listing rooms

                    room = client.rooms[current_room_id]
                    await save_users(client, current_room_id)

                    for user_id in room.users:
                        bbs.writeln(user_id)

                    await join_room(client, selected_room_id)
        
        elif key.upper() == 'S':
            if current_room_id:
                message = bbs.getstr(11, 79, 1024, "")
                await client.room_send(
                    room_id=current_room_id,
                    message_type="m.room.message",
                    content={"msgtype": "m.text", "body": message})
            else:
                bbs.writeln("You're not in any room...") 

        elif key.upper() == 'U':
            bbs.writeln("Loading user list...")
            if current_room_id:
                room = client.rooms[current_room_id]
                await save_users(client, current_room_id)
                for user_id in room.users:
                    bbs.writeln(user_id)
            else:
                bbs.writeln("No room selected.")
    
        elif key.upper() == 'P':  # New command for viewing previous messages
            if current_room_id:
                messages = await client.room_messages(current_room_id, "", limit=23)
                for event in reversed(messages.chunk):
                    if isinstance(event, RoomMessageText):
                        parse_event(event, show_remote, show_names)

            else:
                bbs.writeln("No room selected.")
    
        elif key.upper() == 'I':
            show_remote = not show_remote

        elif key.upper() == 'N':
            show_names = not show_names

        elif key.upper() == 'Q':
            return

        # Sync with the server to receive messages.
        # await client.sync(timeout=30000)
        # Sleep to keep the loop running
        await asyncio.sleep(0.1)  # Small sleep to prevent blocking

if __name__ == "__main__":
    bbs.writeln("Starting script...")  # Debugging print
    try:
        bbs.writeln("Init DB...")  # Debugging print
        setup_database()
    except Exception as e:
        bbs.writeln(f"An error occurred: {e}")
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        bbs.writeln("Script interrupted by user")
    except Exception as e:
        bbs.writeln(f"An error occurred: {e}")

class EmojiVerificationCallbacks:
    def __init__(self, client):
        self.client = client

    async def to_device_callback(self, event):
        if isinstance(event, KeyVerificationStart):
            # Handle KeyVerificationStart event
            if "emoji" not in event.short_authentication_string:
                bbs.writeln("Other device does not support emoji verification.")
                return
            resp = await self.client.accept_key_verification(event.transaction_id)
            if isinstance(resp, ToDeviceError):
                bbs.writeln(f"Accepting verification failed: {resp}")

        elif isinstance(event, KeyVerificationKey):
            # Handle KeyVerificationKey event
            sas = self.client.key_verifications[event.transaction_id]
            emojis = sas.get_emoji()
            bbs.writeln(f"Verify with emojis: {emojis}")
            user_response = bbs.getstr(1, 50, 120, "Do the emojis match? (Y/N)")
            if user_response.lower() == 'y':
                await self.client.confirm_short_auth_string(event.transaction_id)

        elif isinstance(event, KeyVerificationCancel):
            # Handle KeyVerificationCancel event
            bbs.writeln("Verification has been cancelled.")

        elif isinstance(event, KeyVerificationMac):
            # Handle KeyVerificationMac event
            sas = self.client.key_verifications[event.transaction_id]
            if sas.verified:
                bbs.writeln("Emoji verification successful!")
            else:
                bbs.writeln("Emoji verification failed.")
